<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="xyz.guqing.travelpath.mapper.RoutesMapper" >
  <resultMap id="BaseResultMap" type="xyz.guqing.travelpath.entity.model.Routes" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="distance" property="distance" jdbcType="INTEGER" />
    <result column="policy" property="policy" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="INTEGER" />
    <result column="tolls" property="tolls" jdbcType="INTEGER" />
    <result column="tolls_distance" property="tollsDistance" jdbcType="INTEGER" />
    <result column="origin" property="origin" jdbcType="VARCHAR" />
    <result column="destination" property="destination" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="action_count" property="actionCount" jdbcType="INTEGER" />
    <result column="rid" property="rid" jdbcType="BIGINT" />
    <result column="userid" property="userid" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="deleted" property="deleted" jdbcType="SMALLINT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="xyz.guqing.travelpath.entity.model.Routes" extends="BaseResultMap" >
    <result column="path" property="path" jdbcType="BINARY" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, distance, policy, time, tolls, tolls_distance, origin, destination, state, action_count, 
    rid, userid, create_time, modify_time, deleted
  </sql>
  <sql id="Blob_Column_List" >
    path
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="xyz.guqing.travelpath.entity.model.RoutesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from routes
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="xyz.guqing.travelpath.entity.model.RoutesExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from routes
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from routes
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from routes
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="xyz.guqing.travelpath.entity.model.RoutesExample" >
    delete from routes
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="xyz.guqing.travelpath.entity.model.Routes" useGeneratedKeys="true" keyProperty="id">
    insert into routes (distance, policy, time,
      tolls, tolls_distance, origin, 
      destination, state, action_count, 
      rid, userid, create_time, 
      modify_time, deleted, path
      )
    values (#{distance,jdbcType=INTEGER}, #{policy,jdbcType=VARCHAR}, #{time,jdbcType=INTEGER}, 
      #{tolls,jdbcType=INTEGER}, #{tollsDistance,jdbcType=INTEGER}, #{origin,jdbcType=VARCHAR}, 
      #{destination,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{actionCount,jdbcType=INTEGER}, 
      #{rid,jdbcType=BIGINT}, #{userid,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=SMALLINT}, #{path,jdbcType=BINARY}
      )
  </insert>
  <insert id="insertSelective" parameterType="xyz.guqing.travelpath.entity.model.Routes" useGeneratedKeys="true" keyProperty="id">
    insert into routes
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="distance != null" >
        distance,
      </if>
      <if test="policy != null" >
        policy,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="tolls != null" >
        tolls,
      </if>
      <if test="tollsDistance != null" >
        tolls_distance,
      </if>
      <if test="origin != null" >
        origin,
      </if>
      <if test="destination != null" >
        destination,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="actionCount != null" >
        action_count,
      </if>
      <if test="rid != null" >
        rid,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
      <if test="path != null" >
        path,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="distance != null" >
        #{distance,jdbcType=INTEGER},
      </if>
      <if test="policy != null" >
        #{policy,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=INTEGER},
      </if>
      <if test="tolls != null" >
        #{tolls,jdbcType=INTEGER},
      </if>
      <if test="tollsDistance != null" >
        #{tollsDistance,jdbcType=INTEGER},
      </if>
      <if test="origin != null" >
        #{origin,jdbcType=VARCHAR},
      </if>
      <if test="destination != null" >
        #{destination,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="actionCount != null" >
        #{actionCount,jdbcType=INTEGER},
      </if>
      <if test="rid != null" >
        #{rid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=SMALLINT},
      </if>
      <if test="path != null" >
        #{path,jdbcType=BINARY},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="xyz.guqing.travelpath.entity.model.RoutesExample" resultType="java.lang.Integer" >
    select count(*) from routes
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update routes
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.distance != null" >
        distance = #{record.distance,jdbcType=INTEGER},
      </if>
      <if test="record.policy != null" >
        policy = #{record.policy,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=INTEGER},
      </if>
      <if test="record.tolls != null" >
        tolls = #{record.tolls,jdbcType=INTEGER},
      </if>
      <if test="record.tollsDistance != null" >
        tolls_distance = #{record.tollsDistance,jdbcType=INTEGER},
      </if>
      <if test="record.origin != null" >
        origin = #{record.origin,jdbcType=VARCHAR},
      </if>
      <if test="record.destination != null" >
        destination = #{record.destination,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.actionCount != null" >
        action_count = #{record.actionCount,jdbcType=INTEGER},
      </if>
      <if test="record.rid != null" >
        rid = #{record.rid,jdbcType=BIGINT},
      </if>
      <if test="record.userid != null" >
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null" >
        deleted = #{record.deleted,jdbcType=SMALLINT},
      </if>
      <if test="record.path != null" >
        path = #{record.path,jdbcType=BINARY},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update routes
    set id = #{record.id,jdbcType=BIGINT},
      distance = #{record.distance,jdbcType=INTEGER},
      policy = #{record.policy,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=INTEGER},
      tolls = #{record.tolls,jdbcType=INTEGER},
      tolls_distance = #{record.tollsDistance,jdbcType=INTEGER},
      origin = #{record.origin,jdbcType=VARCHAR},
      destination = #{record.destination,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      action_count = #{record.actionCount,jdbcType=INTEGER},
      rid = #{record.rid,jdbcType=BIGINT},
      userid = #{record.userid,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=SMALLINT},
      path = #{record.path,jdbcType=BINARY}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update routes
    set id = #{record.id,jdbcType=BIGINT},
      distance = #{record.distance,jdbcType=INTEGER},
      policy = #{record.policy,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=INTEGER},
      tolls = #{record.tolls,jdbcType=INTEGER},
      tolls_distance = #{record.tollsDistance,jdbcType=INTEGER},
      origin = #{record.origin,jdbcType=VARCHAR},
      destination = #{record.destination,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER},
      action_count = #{record.actionCount,jdbcType=INTEGER},
      rid = #{record.rid,jdbcType=BIGINT},
      userid = #{record.userid,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=SMALLINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="xyz.guqing.travelpath.entity.model.Routes" >
    update routes
    <set >
      <if test="distance != null" >
        distance = #{distance,jdbcType=INTEGER},
      </if>
      <if test="policy != null" >
        policy = #{policy,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=INTEGER},
      </if>
      <if test="tolls != null" >
        tolls = #{tolls,jdbcType=INTEGER},
      </if>
      <if test="tollsDistance != null" >
        tolls_distance = #{tollsDistance,jdbcType=INTEGER},
      </if>
      <if test="origin != null" >
        origin = #{origin,jdbcType=VARCHAR},
      </if>
      <if test="destination != null" >
        destination = #{destination,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="actionCount != null" >
        action_count = #{actionCount,jdbcType=INTEGER},
      </if>
      <if test="rid != null" >
        rid = #{rid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=SMALLINT},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=BINARY},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="xyz.guqing.travelpath.entity.model.Routes" >
    update routes
    set distance = #{distance,jdbcType=INTEGER},
      policy = #{policy,jdbcType=VARCHAR},
      time = #{time,jdbcType=INTEGER},
      tolls = #{tolls,jdbcType=INTEGER},
      tolls_distance = #{tollsDistance,jdbcType=INTEGER},
      origin = #{origin,jdbcType=VARCHAR},
      destination = #{destination,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      action_count = #{actionCount,jdbcType=INTEGER},
      rid = #{rid,jdbcType=BIGINT},
      userid = #{userid,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=SMALLINT},
      path = #{path,jdbcType=BINARY}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="xyz.guqing.travelpath.entity.model.Routes" >
    update routes
    set distance = #{distance,jdbcType=INTEGER},
      policy = #{policy,jdbcType=VARCHAR},
      time = #{time,jdbcType=INTEGER},
      tolls = #{tolls,jdbcType=INTEGER},
      tolls_distance = #{tollsDistance,jdbcType=INTEGER},
      origin = #{origin,jdbcType=VARCHAR},
      destination = #{destination,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      action_count = #{actionCount,jdbcType=INTEGER},
      rid = #{rid,jdbcType=BIGINT},
      userid = #{userid,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=SMALLINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>